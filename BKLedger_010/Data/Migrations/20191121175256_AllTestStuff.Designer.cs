// <auto-generated />
using System;
using BKLedger_010.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BKLedger_010.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191121175256_AllTestStuff")]
    partial class AllTestStuff
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv0mm_Class_X_Student", b =>
                {
                    b.Property<int>("PesonId");

                    b.Property<int>("KelasIdee");

                    b.HasKey("PesonId", "KelasIdee");

                    b.HasIndex("KelasIdee");

                    b.ToTable("conv0mm_Class_X_Student");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv0mm_ManyClass", b =>
                {
                    b.Property<int>("ClassIdee")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName");

                    b.Property<int?>("MobserDudeIdee");

                    b.Property<string>("Section");

                    b.Property<int?>("TopDogDudeIdee");

                    b.HasKey("ClassIdee");

                    b.HasIndex("MobserDudeIdee");

                    b.HasIndex("TopDogDudeIdee");

                    b.ToTable("conv0mm_ManyClass");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv0mm_ManyStudent", b =>
                {
                    b.Property<int>("DudeIdee")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StudentName");

                    b.HasKey("DudeIdee");

                    b.ToTable("conv0mm_ManyStudent");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv1_ManyStudent", b =>
                {
                    b.Property<int>("conv1_ManyStudentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StudentName");

                    b.Property<int?>("THEclassconv1_OneClassId");

                    b.HasKey("conv1_ManyStudentId");

                    b.HasIndex("THEclassconv1_OneClassId");

                    b.ToTable("conv1_ManyStudent");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv1_OneClass", b =>
                {
                    b.Property<int>("conv1_OneClassId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName");

                    b.Property<string>("Section");

                    b.HasKey("conv1_OneClassId");

                    b.ToTable("conv1_OneClass");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv2_ManyStudent", b =>
                {
                    b.Property<int>("Student0Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StudentName");

                    b.Property<int?>("conv2_OneClassClass0Id");

                    b.HasKey("Student0Id");

                    b.HasIndex("conv2_OneClassClass0Id");

                    b.ToTable("conv2_ManyStudent");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv2_OneClass", b =>
                {
                    b.Property<int>("Class0Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName");

                    b.Property<string>("Section");

                    b.HasKey("Class0Id");

                    b.ToTable("conv2_OneClass");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv3_ManyStudent", b =>
                {
                    b.Property<int>("DudeIdee")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassOfTheStudentClassIdee");

                    b.Property<string>("StudentName");

                    b.HasKey("DudeIdee");

                    b.HasIndex("ClassOfTheStudentClassIdee");

                    b.ToTable("conv3_ManyStudent");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv3_OneClass", b =>
                {
                    b.Property<int>("ClassIdee")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName");

                    b.Property<string>("Section");

                    b.HasKey("ClassIdee");

                    b.ToTable("conv3_OneClass");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv4_ManyStudent", b =>
                {
                    b.Property<int>("DudeIdee")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassOfTheStudentClassIdee");

                    b.Property<int>("KelaslassIdee");

                    b.Property<string>("StudentName");

                    b.HasKey("DudeIdee");

                    b.HasIndex("ClassOfTheStudentClassIdee");

                    b.ToTable("conv4_ManyStudent");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv4_OneClass", b =>
                {
                    b.Property<int>("ClassIdee")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName");

                    b.Property<string>("Section");

                    b.HasKey("ClassIdee");

                    b.ToTable("conv4_OneClass");
                });

            modelBuilder.Entity("BKLedger_010.Models.IsolatedSamples.M2M_Course", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CourseId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("Name")
                        .HasColumnName("CourseName");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("M2M_Course");
                });

            modelBuilder.Entity("BKLedger_010.Models.IsolatedSamples.M2M_Student", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("Name")
                        .HasColumnName("StudentName");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("M2M_Student");
                });

            modelBuilder.Entity("BKLedger_010.Models.IsolatedSamples.M2M_StudentCourse", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentCourseId");

                    b.Property<string>("CourseId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("Name");

                    b.Property<string>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("StudentId");

                    b.ToTable("M2M_StudentCourse");
                });

            modelBuilder.Entity("BKLedger_010.Models.IsolatedSamples.O2M_Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("O2M_Company");
                });

            modelBuilder.Entity("BKLedger_010.Models.IsolatedSamples.O2M_EmployeeOfCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("O2M_EmployeeOfCompany");
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.Course", b =>
                {
                    b.Property<int>("CourseID");

                    b.Property<int>("Credits");

                    b.Property<int>("DepartmentID");

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.HasKey("CourseID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Test_Course");
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.CourseAssignment", b =>
                {
                    b.Property<int>("CourseID");

                    b.Property<int>("InstructorID");

                    b.HasKey("CourseID", "InstructorID");

                    b.HasIndex("InstructorID");

                    b.ToTable("Test_CourseAssignment");
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Budget")
                        .HasColumnType("money");

                    b.Property<int?>("InstructorID");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("StartDate");

                    b.HasKey("DepartmentID");

                    b.HasIndex("InstructorID");

                    b.ToTable("Test_Department");
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.Enrollment", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("CourseId");

                    b.Property<int>("EnrollmentId");

                    b.Property<int?>("Grade");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Test_Enrollment");
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.OfficeAssignment", b =>
                {
                    b.Property<int>("InstructorID");

                    b.Property<string>("Location")
                        .HasMaxLength(50);

                    b.HasKey("InstructorID");

                    b.ToTable("Test_OfficeAssignment");
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstMidName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Test_Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.Instructor", b =>
                {
                    b.HasBaseType("BKLedger_010.Models.Test.Person");

                    b.Property<DateTime>("HireDate");

                    b.ToTable("Test_Instructor");

                    b.HasDiscriminator().HasValue("Instructor");
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.Student", b =>
                {
                    b.HasBaseType("BKLedger_010.Models.Test.Person");

                    b.Property<DateTime>("EnrollmentDate");

                    b.ToTable("Test_Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("BKLedger_010.Models.Core_10.Core_ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("Core_ApplicationUser");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv0mm_Class_X_Student", b =>
                {
                    b.HasOne("BKLedger_010.Models.Conventions.conv0mm_ManyClass", "Kelas")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("KelasIdee")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BKLedger_010.Models.Conventions.conv0mm_ManyStudent", "Person")
                        .WithMany("ClassEnrollments")
                        .HasForeignKey("PesonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv0mm_ManyClass", b =>
                {
                    b.HasOne("BKLedger_010.Models.Conventions.conv0mm_ManyStudent", "Mobser")
                        .WithMany()
                        .HasForeignKey("MobserDudeIdee");

                    b.HasOne("BKLedger_010.Models.Conventions.conv0mm_ManyStudent", "TopDog")
                        .WithMany()
                        .HasForeignKey("TopDogDudeIdee");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv1_ManyStudent", b =>
                {
                    b.HasOne("BKLedger_010.Models.Conventions.conv1_OneClass", "THEclass")
                        .WithMany()
                        .HasForeignKey("THEclassconv1_OneClassId");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv2_ManyStudent", b =>
                {
                    b.HasOne("BKLedger_010.Models.Conventions.conv2_OneClass")
                        .WithMany("Students")
                        .HasForeignKey("conv2_OneClassClass0Id");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv3_ManyStudent", b =>
                {
                    b.HasOne("BKLedger_010.Models.Conventions.conv3_OneClass", "ClassOfTheStudent")
                        .WithMany("StudentsInThisClass")
                        .HasForeignKey("ClassOfTheStudentClassIdee");
                });

            modelBuilder.Entity("BKLedger_010.Models.Conventions.conv4_ManyStudent", b =>
                {
                    b.HasOne("BKLedger_010.Models.Conventions.conv4_OneClass", "ClassOfTheStudent")
                        .WithMany("AllStudentsInThisClass")
                        .HasForeignKey("ClassOfTheStudentClassIdee");
                });

            modelBuilder.Entity("BKLedger_010.Models.IsolatedSamples.M2M_Course", b =>
                {
                    b.HasOne("BKLedger_010.Models.Core_10.Core_ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BKLedger_010.Models.Core_10.Core_ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("BKLedger_010.Models.IsolatedSamples.M2M_Student", b =>
                {
                    b.HasOne("BKLedger_010.Models.Core_10.Core_ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BKLedger_010.Models.Core_10.Core_ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("BKLedger_010.Models.IsolatedSamples.M2M_StudentCourse", b =>
                {
                    b.HasOne("BKLedger_010.Models.IsolatedSamples.M2M_Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId");

                    b.HasOne("BKLedger_010.Models.Core_10.Core_ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("BKLedger_010.Models.Core_10.Core_ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("BKLedger_010.Models.IsolatedSamples.M2M_Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("BKLedger_010.Models.IsolatedSamples.O2M_EmployeeOfCompany", b =>
                {
                    b.HasOne("BKLedger_010.Models.IsolatedSamples.O2M_Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.Course", b =>
                {
                    b.HasOne("BKLedger_010.Models.Test.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.CourseAssignment", b =>
                {
                    b.HasOne("BKLedger_010.Models.Test.Course", "Course")
                        .WithMany("CourseAssignments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BKLedger_010.Models.Test.Instructor", "Instructor")
                        .WithMany("CourseAssignments")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.Department", b =>
                {
                    b.HasOne("BKLedger_010.Models.Test.Instructor", "Administrator")
                        .WithMany()
                        .HasForeignKey("InstructorID");
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.Enrollment", b =>
                {
                    b.HasOne("BKLedger_010.Models.Test.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BKLedger_010.Models.Test.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BKLedger_010.Models.Test.OfficeAssignment", b =>
                {
                    b.HasOne("BKLedger_010.Models.Test.Instructor", "Instructor")
                        .WithOne("OfficeAssignment")
                        .HasForeignKey("BKLedger_010.Models.Test.OfficeAssignment", "InstructorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
